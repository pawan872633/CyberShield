{"ast":null,"code":"// src/api.js\nimport axios from \"axios\";\n\n/**\r\n * API base URL priority:\r\n * 1) window.__API_BASE__  (optional: set in index.html if needed)\r\n * 2) process.env.REACT_APP_API_BASE_URL  (set via .env)\r\n * 3) fallback: http://127.0.0.1:8000\r\n */\nconst BASE_URL = typeof window !== \"undefined\" && window.__API_BASE__ || process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000\";\nconst API = axios.create({\n  baseURL: BASE_URL,\n  timeout: 15000,\n  // 15s\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// (Optional) Response interceptor: always throw clean errors\nAPI.interceptors.response.use(res => res, err => {\n  var _err$response, _err$response$data, _err$response2, _err$response2$data;\n  const detail = (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.detail) || (err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || (err === null || err === void 0 ? void 0 : err.message) || \"Request failed\";\n  return Promise.reject(new Error(detail));\n});\n\n// ---------- Auth ----------\nexport const registerUser = data => API.post(\"/users\", data); // {username, email, password}\nexport const loginUser = data => API.post(\"/auth/login\", data); // {email, password}\n\n// ---------- Detections / ML ----------\nexport const detectThreat = payload => API.post(\"/detect\", payload); // {src_ip, dest_ip, features, threshold}\nexport const getDetections = () => API.get(\"/detections\");\n\n// ---------- Blacklist ----------\nexport const getBlacklist = () => API.get(\"/blacklist\");\nexport const addBlacklist = data => API.post(\"/blacklist\", data); // {ip, reason?}\n\n// ---------- Health (optional) ----------\nexport const health = () => API.get(\"/health\");\nexport default API;","map":{"version":3,"names":["axios","BASE_URL","window","__API_BASE__","process","env","REACT_APP_API_BASE_URL","API","create","baseURL","timeout","headers","interceptors","response","use","res","err","_err$response","_err$response$data","_err$response2","_err$response2$data","detail","data","message","Promise","reject","Error","registerUser","post","loginUser","detectThreat","payload","getDetections","get","getBlacklist","addBlacklist","health"],"sources":["C:/xampp/htdocs/cybershield/cybershield/frontend/src/api.js"],"sourcesContent":["// src/api.js\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * API base URL priority:\r\n * 1) window.__API_BASE__  (optional: set in index.html if needed)\r\n * 2) process.env.REACT_APP_API_BASE_URL  (set via .env)\r\n * 3) fallback: http://127.0.0.1:8000\r\n */\r\nconst BASE_URL =\r\n  (typeof window !== \"undefined\" && window.__API_BASE__) ||\r\n  process.env.REACT_APP_API_BASE_URL ||\r\n  \"http://127.0.0.1:8000\";\r\n\r\nconst API = axios.create({\r\n  baseURL: BASE_URL,\r\n  timeout: 15000, // 15s\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// (Optional) Response interceptor: always throw clean errors\r\nAPI.interceptors.response.use(\r\n  (res) => res,\r\n  (err) => {\r\n    const detail =\r\n      err?.response?.data?.detail ||\r\n      err?.response?.data?.message ||\r\n      err?.message ||\r\n      \"Request failed\";\r\n    return Promise.reject(new Error(detail));\r\n  }\r\n);\r\n\r\n// ---------- Auth ----------\r\nexport const registerUser = (data) => API.post(\"/users\", data);           // {username, email, password}\r\nexport const loginUser = (data) => API.post(\"/auth/login\", data);         // {email, password}\r\n\r\n// ---------- Detections / ML ----------\r\nexport const detectThreat = (payload) => API.post(\"/detect\", payload);    // {src_ip, dest_ip, features, threshold}\r\nexport const getDetections = () => API.get(\"/detections\");\r\n\r\n// ---------- Blacklist ----------\r\nexport const getBlacklist = () => API.get(\"/blacklist\");\r\nexport const addBlacklist = (data) => API.post(\"/blacklist\", data);       // {ip, reason?}\r\n\r\n// ---------- Health (optional) ----------\r\nexport const health = () => API.get(\"/health\");\r\n\r\nexport default API;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GACX,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,YAAY,IACrDC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAClC,uBAAuB;AAEzB,MAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAM,CAAC;EACvBC,OAAO,EAAER,QAAQ;EACjBS,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BC,GAAG,IAAKA,GAAG,EACXC,GAAG,IAAK;EAAA,IAAAC,aAAA,EAAAC,kBAAA,EAAAC,cAAA,EAAAC,mBAAA;EACP,MAAMC,MAAM,GACV,CAAAL,GAAG,aAAHA,GAAG,wBAAAC,aAAA,GAAHD,GAAG,CAAEH,QAAQ,cAAAI,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAeK,IAAI,cAAAJ,kBAAA,uBAAnBA,kBAAA,CAAqBG,MAAM,MAC3BL,GAAG,aAAHA,GAAG,wBAAAG,cAAA,GAAHH,GAAG,CAAEH,QAAQ,cAAAM,cAAA,wBAAAC,mBAAA,GAAbD,cAAA,CAAeG,IAAI,cAAAF,mBAAA,uBAAnBA,mBAAA,CAAqBG,OAAO,MAC5BP,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEO,OAAO,KACZ,gBAAgB;EAClB,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACL,MAAM,CAAC,CAAC;AAC1C,CACF,CAAC;;AAED;AACA,OAAO,MAAMM,YAAY,GAAIL,IAAI,IAAKf,GAAG,CAACqB,IAAI,CAAC,QAAQ,EAAEN,IAAI,CAAC,CAAC,CAAW;AAC1E,OAAO,MAAMO,SAAS,GAAIP,IAAI,IAAKf,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAEN,IAAI,CAAC,CAAC,CAAS;;AAE1E;AACA,OAAO,MAAMQ,YAAY,GAAIC,OAAO,IAAKxB,GAAG,CAACqB,IAAI,CAAC,SAAS,EAAEG,OAAO,CAAC,CAAC,CAAI;AAC1E,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAMzB,GAAG,CAAC0B,GAAG,CAAC,aAAa,CAAC;;AAEzD;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM3B,GAAG,CAAC0B,GAAG,CAAC,YAAY,CAAC;AACvD,OAAO,MAAME,YAAY,GAAIb,IAAI,IAAKf,GAAG,CAACqB,IAAI,CAAC,YAAY,EAAEN,IAAI,CAAC,CAAC,CAAO;;AAE1E;AACA,OAAO,MAAMc,MAAM,GAAGA,CAAA,KAAM7B,GAAG,CAAC0B,GAAG,CAAC,SAAS,CAAC;AAE9C,eAAe1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}